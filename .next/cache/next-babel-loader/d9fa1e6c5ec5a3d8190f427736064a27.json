{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nconst CREATE_SCRIPT_TAG = gql`\nmutation scriptTagCreate($input: ScriptTagInput!){\n    scriptTagCreate(input: $input){\n        scriptTag {\n            id\n        }\n        userErrors {\n            field\n            message\n        }\n    }\n}`;\nconst QUERY_SCRIPTTAGS = gql`\nquery{\n    scriptTags(first:5){\n      edges{\n        node{\n          id\n          src\n          displayScope\n        }\n      }\n    }\n  }\n`;\nconst DELETE_SCRIPTAG = gql`\nmutation scriptTagDelete($id: ID!){\n    scriptTagDelete(id: $id){\n        deletedScriptTagId\n    \t\tuserErrors{\n          field\n          message\n        }\n    }\n}\n`;\n\nfunction ScriptPage() {\n  const [createScripts] = useMutation(CREATE_SCRIPT_TAG);\n  CONST[deleteScripts] = useMutation(DELETE_SCRIPTAG);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(QUERY_SCRIPTTAGS);\n  if (loading) return __jsx(\"div\", null, \"Loading...\");\n  if (error) return __jsx(\"div\", null, error.message);\n  return __jsx(\"div\", null, __jsx(\"h1\", null, \"These are the script tags right now:\"), __jsx(\"button\", {\n    type: \"submit\",\n    onClick: () => {\n      console.log(createScripts);\n      createScripts({\n        variables: {\n          input: {\n            src: \"https://fd8b3860e19d.ngrok.io/test-script.js\",\n            displayScope: \"ALL\"\n          },\n          refetchQueries: [{\n            query: QUERY_SCRIPTTAGS\n          }]\n        }\n      });\n    }\n  }, \"Create Script Tag\"), data.scriptTags.edges.map(item => {\n    return __jsx(\"div\", {\n      key: item.node.id\n    }, __jsx(\"p\", null, item.node.id), __jsx(\"button\", null));\n  }));\n}\n\nexport default ScriptPage;","map":{"version":3,"sources":["/Users/bertrandshao/Desktop/Repositories/Shopify-API/pages/script-page.js"],"names":["gql","useQuery","useMutation","CREATE_SCRIPT_TAG","QUERY_SCRIPTTAGS","DELETE_SCRIPTAG","ScriptPage","createScripts","CONST","deleteScripts","loading","error","data","message","console","log","variables","input","src","displayScope","refetchQueries","query","scriptTags","edges","map","item","node","id"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AAEA,MAAMC,iBAAiB,GAAGH,GAAI;;;;;;;;;;;EAA9B;AAaA,MAAMI,gBAAgB,GAAGJ,GAAI;;;;;;;;;;;;CAA7B;AAcA,MAAMK,eAAe,GAAGL,GAAI;;;;;;;;;;CAA5B;;AAYA,SAASM,UAAT,GAAsB;AAElB,QAAM,CAACC,aAAD,IAAkBL,WAAW,CAACC,iBAAD,CAAnC;AACAK,EAAAA,KAAK,CAACC,aAAD,CAAL,GAAuBP,WAAW,CAACG,eAAD,CAAlC;AACA,QAAM;AAAEK,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BX,QAAQ,CAACG,gBAAD,CAAzC;AAEA,MAAIM,OAAJ,EAAa,OAAO,gCAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,mBAAMA,KAAK,CAACE,OAAZ,CAAP;AAEX,SACI,mBACI,yDADJ,EAEI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAE,MAAM;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAYR,aAAZ;AACAA,MAAAA,aAAa,CAAC;AACVS,QAAAA,SAAS,EAAE;AACPC,UAAAA,KAAK,EAAE;AACHC,YAAAA,GAAG,EAAE,8CADF;AAEHC,YAAAA,YAAY,EAAE;AAFX,WADA;AAKPC,UAAAA,cAAc,EAAE,CAAC;AAAEC,YAAAA,KAAK,EAAEjB;AAAT,WAAD;AALT;AADD,OAAD,CAAb;AASH;AAXD,yBAFJ,EAkBQQ,IAAI,CAACU,UAAL,CAAgBC,KAAhB,CAAsBC,GAAtB,CAA0BC,IAAI,IAAI;AAC9B,WACI;AAAK,MAAA,GAAG,EAAEA,IAAI,CAACC,IAAL,CAAUC;AAApB,OACI,iBACKF,IAAI,CAACC,IAAL,CAAUC,EADf,CADJ,EAII,qBAJJ,CADJ;AAiBH,GAlBD,CAlBR,CADJ;AAyCH;;AAED,eAAerB,UAAf","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\n\nconst CREATE_SCRIPT_TAG = gql`\nmutation scriptTagCreate($input: ScriptTagInput!){\n    scriptTagCreate(input: $input){\n        scriptTag {\n            id\n        }\n        userErrors {\n            field\n            message\n        }\n    }\n}`;\n\nconst QUERY_SCRIPTTAGS = gql`\nquery{\n    scriptTags(first:5){\n      edges{\n        node{\n          id\n          src\n          displayScope\n        }\n      }\n    }\n  }\n`\n\nconst DELETE_SCRIPTAG = gql`\nmutation scriptTagDelete($id: ID!){\n    scriptTagDelete(id: $id){\n        deletedScriptTagId\n    \t\tuserErrors{\n          field\n          message\n        }\n    }\n}\n`\n\nfunction ScriptPage() {\n\n    const [createScripts] = useMutation(CREATE_SCRIPT_TAG)\n    CONST[deleteScripts] = useMutation(DELETE_SCRIPTAG)\n    const { loading, error, data } = useQuery(QUERY_SCRIPTTAGS)\n\n    if (loading) return <div>Loading...</div>\n    if (error) return <div>{error.message}</div>\n\n    return (\n        <div>\n            <h1>These are the script tags right now:</h1>\n            <button type='submit' onClick={() => {\n                console.log(createScripts)\n                createScripts({\n                    variables: {\n                        input: {\n                            src: \"https://fd8b3860e19d.ngrok.io/test-script.js\",\n                            displayScope: \"ALL\"\n                        },\n                        refetchQueries: [{ query: QUERY_SCRIPTTAGS }]\n                    }\n                })\n            }}>\n                Create Script Tag\n            </button>\n\n            {\n                data.scriptTags.edges.map(item => {\n                    return (\n                        <div key={item.node.id}>\n                            <p>\n                                {item.node.id}\n                            </p>\n                            <button></button>\n                            {/* <button type='submit' onClick={() => {\n                                deleteScripts({\n                                    variables: {\n                                        id: item.node.id\n                                    },\n                                    refetchQueries: [{ query: QUERY_SCRIPTTAGS }]\n                                })\n                            }}>Delete Script Tag</button> */}\n                        </div>\n\n                    )\n                })\n            }\n        </div >\n    )\n}\n\nexport default ScriptPage;"]},"metadata":{},"sourceType":"module"}